<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:MoocDownloader.Controls"
                    xmlns:downloads="clr-namespace:MoocDownloader.Models.Downloads"
                    xmlns:icon="http://metro.mahapps.com/winfx/xaml/iconpacks">
    <!--  Common  -->
    <Style TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style TargetType="icon:PackIconUnicons">
        <Setter Property="Width" Value="12" />
        <Setter Property="Height" Value="12" />
    </Style>

    <Style x:Key="SeparatorStyle" TargetType="Rectangle">
        <Setter Property="Height" Value="20" />
        <Setter Property="Width" Value="2" />
        <Setter Property="Margin" Value="10,0" />
        <Setter Property="Fill" Value="{DynamicResource BorderBrush}" />
    </Style>

    <Style x:Key="ControlButtonStyle" TargetType="Button">
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="45" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#E8EBEF" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#D7DCE6" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Tag" Value="Danger" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
                    <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="controls:SwitchPanel">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:SwitchPanel">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <ContentPresenter Name="CheckedContentPresenter" Content="{TemplateBinding CheckedContent}" />
                        <ContentPresenter Name="UncheckedContentPresenter" Content="{TemplateBinding UncheckedContent}" />
                        <ContentPresenter Name="IndeterminateContentPresenter" Content="{TemplateBinding IndeterminateContent}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--  IsChecked is True  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckedContentPresenter" Property="Visibility" Value="Visible" />
                            <Setter TargetName="UncheckedContentPresenter" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="IndeterminateContentPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <!--  IsChecked is False  -->
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="CheckedContentPresenter" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="UncheckedContentPresenter" Property="Visibility" Value="Visible" />
                            <Setter TargetName="IndeterminateContentPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <!--  IsChecked is Null  -->
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckedContentPresenter" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="UncheckedContentPresenter" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="IndeterminateContentPresenter" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:IconTextButton">
        <Setter Property="Background" Value="{DynamicResource SecondaryTitleBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="FontSize" Value="11" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ThirdlyTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Tab Control  -->
    <Style TargetType="TabControl">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0"
                                BorderBrush="{DynamicResource SecondaryBorderBrush}"
                                BorderThickness="0,0,0,1">
                            <UniformGrid Panel.ZIndex="1"
                                         IsItemsHost="True"
                                         KeyboardNavigation.TabIndex="1"
                                         Rows="1" />
                        </Border>
                        <ContentPresenter x:Name="PART_SelectedContentHost"
                                          Grid.Row="1"
                                          Margin="0"
                                          Content="{TemplateBinding SelectedContent}"
                                          ContentStringFormat="{TemplateBinding SelectedContentStringFormat}"
                                          ContentTemplate="{TemplateBinding SelectedContentTemplate}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TabItem">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.Resources>
                            <Style TargetType="Border">
                                <Setter Property="Background" Value="Transparent" />
                            </Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="HorizontalAlignment" Value="Center" />
                                <Setter Property="VerticalAlignment" Value="Center" />
                            </Style>
                            <Style TargetType="icon:PackIconUnicons">
                                <Setter Property="Width" Value="12" />
                                <Setter Property="Height" Value="12" />
                                <Setter Property="Margin" Value="0,0,10,0" />
                                <Setter Property="VerticalAlignment" Value="Center" />
                                <Setter Property="HorizontalAlignment" Value="Center" />
                            </Style>
                        </Grid.Resources>
                        <Border Padding="10" Cursor="Hand">
                            <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                                <icon:PackIconUnicons Foreground="{TemplateBinding Foreground}" Kind="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}" />
                                <TextBlock Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Header}" />
                            </StackPanel>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--  Detail Section  -->
    <Style x:Key="DetailSectionStyle" TargetType="GroupBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <Border Grid.Row="0">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" />
                        </Border>

                        <Border Grid.Row="1" Margin="0,10,0,0">
                            <ContentPresenter ContentSource="Content" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Listbox  -->
    <ControlTemplate x:Key="CleanItemTemplate" TargetType="ListBoxItem">
        <ContentPresenter />
    </ControlTemplate>

    <Style x:Key="CleanItemContainerStyle" TargetType="ListBoxItem">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template" Value="{StaticResource CleanItemTemplate}" />
    </Style>

    <ItemsPanelTemplate x:Key="CleanItemsPanelTemplate">
        <StackPanel />
    </ItemsPanelTemplate>

    <ControlTemplate x:Key="CleanListBoxTemplate">
        <ScrollViewer CanContentScroll="False"
                      HorizontalScrollBarVisibility="Disabled"
                      VerticalScrollBarVisibility="Auto">
            <ItemsPresenter />
        </ScrollViewer>
    </ControlTemplate>

    <!--  Queue List  -->
    <DataTemplate x:Key="QueueDataTemplate" DataType="{x:Type downloads:LibraryModel}">
        <controls:QueueItem x:Name="QueueItem" Playlist="{Binding}" />

        <DataTemplate.Resources>
            <Style TargetType="controls:QueueItem">
                <Setter Property="Background" Value="Transparent" />
            </Style>
        </DataTemplate.Resources>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                <Setter TargetName="QueueItem" Property="Background" Value="{DynamicResource ItemSelectedBrush}" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="QueueItem" Property="Background" Value="{DynamicResource ItemMouseOverBrush}" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--  Ready List  -->
    <DataTemplate x:Key="ReadyDataTemplate" DataType="{x:Type downloads:LibraryModel}">
        <controls:ReadyItem x:Name="ReadyItem" Playlist="{Binding}" />

        <DataTemplate.Resources>
            <Style TargetType="controls:ReadyItem">
                <Setter Property="Background" Value="Transparent" />
            </Style>
        </DataTemplate.Resources>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                <Setter TargetName="ReadyItem" Property="Background" Value="{DynamicResource ItemSelectedBrush}" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="ReadyItem" Property="Background" Value="{DynamicResource ItemMouseOverBrush}" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--  Trash List  -->
    <DataTemplate x:Key="TrashDataTemplate" DataType="{x:Type downloads:LibraryModel}">
        <controls:TrashItem x:Name="TrashItem" Playlist="{Binding}" />

        <DataTemplate.Resources>
            <Style TargetType="controls:TrashItem">
                <Setter Property="Background" Value="Transparent" />
            </Style>
        </DataTemplate.Resources>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                <Setter TargetName="TrashItem" Property="Background" Value="{DynamicResource ItemSelectedBrush}" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="TrashItem" Property="Background" Value="{DynamicResource ItemMouseOverBrush}" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--  Media List  -->
    <DataTemplate x:Key="MediaDataTemplate">
        <controls:MediaItem x:Name="MediaItem" />

        <DataTemplate.Resources>
            <Style TargetType="controls:MediaItem">
                <Setter Property="Background" Value="Transparent" />
            </Style>
        </DataTemplate.Resources>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                <Setter TargetName="MediaItem" Property="Background" Value="{DynamicResource ItemSelectedBrush}" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="MediaItem" Property="Background" Value="{DynamicResource ItemMouseOverBrush}" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--  Creation List  -->
    <DataTemplate x:Key="CreationDataTemplate">
        <controls:CreationItem x:Name="CreationItem" />

        <DataTemplate.Resources>
            <Style TargetType="controls:CreationItem">
                <Setter Property="Background" Value="Transparent" />
            </Style>
        </DataTemplate.Resources>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                <Setter TargetName="CreationItem" Property="Background" Value="{DynamicResource ItemSelectedBrush}" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="CreationItem" Property="Background" Value="{DynamicResource ItemMouseOverBrush}" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--  Website List  -->
    <DataTemplate x:Key="WebsiteDataTemplate">
        <controls:WebsiteItem x:Name="WebsiteItem" Website="{Binding}" />

        <DataTemplate.Resources>
            <Style TargetType="controls:WebsiteItem">
                <Setter Property="Background" Value="Transparent" />
            </Style>
        </DataTemplate.Resources>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                <Setter TargetName="WebsiteItem" Property="Background" Value="{DynamicResource ItemSelectedBrush}" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="WebsiteItem" Property="Background" Value="{DynamicResource ItemMouseOverBrush}" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--  Context Menu  -->
    <Style BasedOn="{StaticResource MenuItemBaseStyle}" TargetType="MenuItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="26" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="0"
                                              Margin="0,0,10,0"
                                              VerticalAlignment="Center"
                                              ContentSource="Icon" />
                            <ContentPresenter Grid.Column="1"
                                              ContentSource="Header"
                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuItemIconStyle" TargetType="icon:PackIconUnicons">
        <Setter Property="Height" Value="13" />
        <Setter Property="Width" Value="13" />
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}" />
    </Style>
</ResourceDictionary>